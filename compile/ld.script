OUTPUT_ARCH(i386)
ENTRY(start)
physbase = 0x100000;
SECTIONS
{
  . = 0x800;
  CODE16 = ABSOLUTE(.);
  . = 0x2000;
  CODE16END = ABSOLUTE(.);
  CODE16STACKBOTTOM = ABSOLUTE(.);
  . = 0x4000;
  CODE16STACKTOP = ABSOLUTE(.);
  . = 0xA0000;
  VGA_BASE = ABSOLUTE(.);
  . = 0xB8000;
  VGA_TEXT_BASE = ABSOLUTE(.);
  . = physbase;                 /* Image starts here                    */
  . = ALIGN(4096);              /* Accommodate bad physbase             */
  __executable_start = ABSOLUTE(.);
  .text : {
    text = ABSOLUTE(.);         /* text: beginning of text segment      */
    *(.text .text.*)            /* asm text, then C text                */
    *(.rodata .rodata.*)        /* asm and C read-only data             */
    . = ALIGN(4);               /* ctors align */
    ctors = ABSOLUTE(.);
    *(.ctors .ctors.*)          /* ctors */
    ectors = ABSOLUTE(.);
    etext = ABSOLUTE(.) ;       /* etext: end of text                   */
    . = ALIGN(4096);
  }
  .data :
  {
    data = ABSOLUTE(.);         /* data: beginning of data segment      */
    *(.data .data.*)                                                    
    edata = ABSOLUTE(.) ;       /* edata: end of data                   */
    . = ALIGN(4096);                                                    
  }                                                                     
  .bss :                                                                
  {                                                                     
    bss = ABSOLUTE(.);          /* bss: beginning of bss segment        */
    *(.bss .bss.*)
    *(COMMON)                   /* extra sections that are common       */
    ebss = ABSOLUTE(.) ;        /* ebss: end of bss                     */
  }
  . = ALIGN(4096);
  kernel_vm_heap_start = ABSOLUTE(.);
  . = ALIGN(4096 * 1024);
  kernel_pg_pos = ABSOLUTE(.);
  . = . + 4096 * 1024;
  /* Stabs debugging sections.  */
  end = ABSOLUTE(.);          /* end: end of image                    */
  _end = ABSOLUTE(.);         /* _end: end of image                   */

  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  .gnu.build.attributes : { *(.gnu.build.attributes .gnu.build.attributes.*) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  /* DWARF Extension.  */
  .debug_macro    0 : { *(.debug_macro) }
  .debug_addr     0 : { *(.debug_addr) }
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
}
